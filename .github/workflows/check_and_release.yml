name: Check & Release

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'module/immerse_rules.xml'
      - 'module/immerse_rules.xsd'
      - 'list.csv'

  push:
    branches: [ main ]
    paths:
      - 'module/**'
  workflow_dispatch:



jobs:
  Validate-XML:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库文件
        uses: actions/checkout@v5

      - name: 安装依赖
        run: |
          pip3 install xmlschema

      - name: 校验XML文件
        run: |
          python3 scripts/validate_xml.py --xsd module/immerse_rules.xsd --xml module/immerse_rules.xml

  Sort-And-Build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: Validate-XML
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    env:
      TZ: Asia/Shanghai

    steps:
      - name: 检出仓库文件
        uses: actions/checkout@v5

      - name: 安装依赖
        run: |
          pip3 install pypinyin

      - name: 整理XML和CSV文件
        run: |
          python3 scripts/sort_release_files.py module/immerse_rules.xml list.csv

      - name: 更新模块文件
        id: update_module_files
        run: |
          FILE=module/module.prop

          VERSION=$(date +'%Y%m%d%H%M')
          VERSION_CODE="$(date +'%y%m%d')$GITHUB_RUN_NUMBER"

          sed -i "s/^version=.*/version=$VERSION/" $FILE
          sed -i "s/^versionCode=.*/versionCode=$VERSION_CODE/" $FILE

          ZIP_NAME="MiNavBarImmerse_${VERSION}.zip"
          cat <<EOF > update.json
          {
            "version": "$VERSION",
            "versionCode": $VERSION_CODE,
            "zipUrl": "https://github.com/${{ github.repository }}/releases/download/AutoBuild_${VERSION}/$ZIP_NAME",
            "changelog": "https://raw.githubusercontent.com/${{ github.repository }}/main/changelog.md"
          }
          EOF

          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add module/module.prop module/immerse_rules.xml list.csv update.json

          git commit -m "Release Version: $VERSION" --author="${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
          git push

          echo "MODULE_VERSION=$VERSION" >> $GITHUB_OUTPUT


      - name: 压缩模块文件
        run: |
          cd module
          zip -r ../MiNavBarImmerse_${{ steps.update_module_files.outputs.module_version }}.zip . -x "*/immerse_rules.xsd" "immerse_rules.xsd"

      - name: 上传到Release
        uses: softprops/action-gh-release@v2
        with:
          name: MiNavBarImmerse_${{ steps.update_module_files.outputs.module_version }}
          tag_name: AutoBuild_${{ steps.update_module_files.outputs.module_version }}
          files: MiNavBarImmerse_${{ steps.update_module_files.outputs.module_version }}.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 上传到Telegram
        env:
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          ZIP_FILE: "${{ github.workspace }}/MiNavBarImmerse_${{ steps.update_module_files.outputs.module_version }}.zip"
        
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          COMMIT_MESSAGE="Manually run by ${{ github.actor }}"
          else
          RAW_MSG="${{ github.event.head_commit.message }}"
          TRIMMED_MSG=$(echo "$RAW_MSG" | sed -e '1{/^$/d}' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

          COMMIT_MESSAGE="New push to GitHub
          <pre>$TRIMMED_MSG</pre>
          by <code>${{ github.event.head_commit.author.name }}</code>
          See commit detail <a href='${{ github.event.head_commit.url }}'>here</a>"
          fi

          curl -F chat_id=${CHANNEL_ID} \
               -F message_thread_id=39 \
               -F document=@"${ZIP_FILE}" \
               -F parse_mode="HTML" \
               -F caption="$COMMIT_MESSAGE" \
               https://api.telegram.org/bot${BOT_TOKEN}/sendDocument